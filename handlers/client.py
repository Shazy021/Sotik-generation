from create_bot import dp, bot, spark
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, InputMediaPhoto, FSInputFile
from keyboards.client_kb import menu_markup, to_menu, report_markup
from reports import report_maker


@dp.message(Command(commands=['start', 'start_menu']))
async def process_start_command(message: Message) -> None:
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} üëã',
        reply_markup=ReplyKeyboardRemove(),
    )
    await message.answer(
        f'–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É üëá',
        reply_markup=menu_markup
    )

    if message.text == '/start_menu':
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await message.delete()


@dp.callback_query(lambda callback: callback.data in ['/report'])
async def process_report_command(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id - 1)
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await callback.answer()

    check_db_con_message = await bot.send_message(callback.from_user.id,
                                                  f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n'
                                                  f'–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...',
                                                  reply_markup=to_menu
                                                  )

    if spark.validate_connection('products'):
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=check_db_con_message.message_id)
        await bot.send_message(callback.from_user.id,
                               f'üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ\n'
                               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ üëá',
                               reply_markup=report_markup
                               )
    else:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=check_db_con_message.message_id)
        await bot.send_message(callback.from_user.id,
                               f'üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n'
                               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                               )


@dp.callback_query(lambda callback: callback.data in ['/last_day_report'])
async def last_day_report_builder(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await callback.answer()

    wait_message = await bot.send_message(callback.from_user.id,
                                          f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n'
                                          f'–ò–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - 4 –º–∏–Ω',
                                          reply_markup=to_menu
                                          )

    rep = report_maker.ReportGenerator(spark.get_table('orders'),
                                       spark.get_table('products'),
                                       spark.get_table('buyers'))

    charts_names = rep.create_last_day_report()
    media = [InputMediaPhoto(media=FSInputFile(f'./data/charts/{chart_name}')) for chart_name in charts_names]

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=wait_message.message_id)

    await bot.send_media_group(callback.message.chat.id, media)
    await bot.send_message(callback.from_user.id,
                           f'–í–æ—Ç –≤–∞—à –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å.'
                           )
